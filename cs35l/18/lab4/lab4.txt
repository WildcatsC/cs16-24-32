Zheng, Wang (404855295)
CS 35L lab4.txt

#   NOTE: this lab is done under the directory '~/lab4'


1. Download the buggy coreutils and extract the files

Commands:
    wget http://web.cs.ucla.edu/classes/fall18/cs35L/assign/coreutils-with-bug.tar.gz
    tar -xf coreutils-with-bug.tar.gz

---------------------------------------------------------------------------------------------------

2. Attempt to build coreutils as-it

Commands:
    mkdir coreutils-with-bug-ins    #install the coreutils in this directory
    cd ~/lab4/coreutils-with-bug
    ./configure --prefix=/u/eng/class/classini/lab4/coreutils-with-bug-ins
    make

The following errors are produced:

In file included from utimecmp.c:41:
utimens.h:2:5: error: conflicting types for 'futimens'
 int futimens (int, char const *, struct timespec const [2]);
     ^~~~~~~~
In file included from utimecmp.h:25,
                 from utimecmp.c:25:
/usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was here
 extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
            ^~~~~~~~
make[3]: *** [Makefile:659: utimecmp.o] Error 1
make[3]: Leaving directory '/w/home.02/class/classini/lab4/coreutils-with-bug/lib'
make[2]: *** [Makefile:414: all] Error 2
make[2]: Leaving directory '/w/home.02/class/classini/lab4/coreutils-with-bug/lib'
make[1]: *** [Makefile:419: all-recursive] Error 1
make[1]: Leaving directory '/w/home.02/class/classini/lab4/coreutils-with-bug'
make: *** [Makefile:357: all] Error 2

#   REASON: This error is caused by functions with the same name "futimens"; thus, there are
    function definition conflicts.

---------------------------------------------------------------------------------------------------

3. Apply the patch to replace all "futimens" to "coreutils_futimens" and resolve the issue

#   Question: Why does the renaming patch fix the issue?
#   Answer: Since the patch will rename the second function (originally named "futimens") to
    "coreutils_futimens". It also replace all function-calls of the second "futimens" function
    to function-calls of "coreutils_futimens". Thus, the naming conflicts are resolved; also,
    the program will call the correct "coreutils_futimens" function at the right place.

Commands:
    cd ~/lab4
    wget http://web.cs.ucla.edu/classes/fall18/cs35L/assign/coreutils.diff
    cd coreutils-with-bug
    patch -p0 <~/lab4/coreutils.diff

---------------------------------------------------------------------------------------------------

4. Attempt to re-build and install the coreutils

Commands:
    make
    make install

#   NOTE: this time, the 'make' command no longer produce any error, showing that the problem
    has been fixed by the patch

---------------------------------------------------------------------------------------------------

5. Reproduce the bug

#   NOTE: I use the professor's code post on the website, the following are test of the behavior
    of the NON-BUGGY ls.

Commands:
$ tmp=$(mktemp -d)
$ cd $tmp
$ touch -d '1918-11-11 11:00 GMT' wwi-armistice
$ touch now
$ sleep 1
$ touch now1
$ TZ=UTC0 ls -lt --full-time wwi-armistice now now1

Output:
-rw-r--r-- 1 classini class 0 2018-11-02 04:43:33.711622286 +0000 now1
-rw-r--r-- 1 classini class 0 2018-11-02 04:43:22.308238633 +0000 now
-rw-r--r-- 1 classini class 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice



#   NOTE: now use the ls in the coreutils we just installed (which should be buggy)

$ TZ=UTC0 ~/lab4/coreutils-with-bug-ins/bin/ls -lt --full-time wwi-armistice now now1

Output:
-rw-r--r-- 1 classini class 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
-rw-r--r-- 1 classini class 0 2018-11-02 04:43:33.711622286 +0000 now1
-rw-r--r-- 1 classini class 0 2018-11-02 04:43:22.308238633 +0000 now



#   Notice that the 'ls' in the coreutils-with-bug will keep the two new files (now and now1) in
    the same order as the NON-BUGGY version of 'ls'. However, the "wwi-armistics" file is placed
    at the very first place as if it is the file that is changed most recently (or in future).
    Thus, this is a bug of the 'ls' in the coreutils-with-bug.

---------------------------------------------------------------------------------------------------

6. Debugging using GDB

(a) Turn off optimizations

#   NOTE: I firstly reconfigure the coreutils so that CFLAGS are set to "-g -O0" in the make file.
    The reason I have to do this is that the default option specified in "configure" file is to
    use CFLAGS="-g -O2", with this degree of optimization, some of the debugging result may not
    work as expected (e.g. a value I am tracing may got <value optimized out>, which is not good.)
    Thus, I re-make and install the coreutils with CFLAGS="-g -O0" option to turn off
    optimization. The following are the commands I run to achieve this.

Commands:
    ./configure CFLAGS="-g -O0" --prefix=/u/eng/class/classini/lab4/coreutils-with-bug-ins
    make
    make install


(b) GDB debugging

#   Since inside the gdb environment, I can no longer use "$tmp" to access the tmp directory I
    created before. Thus, I will have to directly call the full path to the directory I created
    before.

Command:
    $tmp

Output:
    -bash: /tmp/tmp.kj4DxAgk7N: Is a directory

#   Thus, we will use "/tmp/tmp.kj4DxAgk7N" to access the files now, now1 and wwi-armistice


#   NOTE: to determing where to should I set the breakpoint for this huge function, I use emacs to
    open the source file of ls ("ls.c"). Since the problem exists on the way of sort the list
    of files, I look for the keyword "sort" and only one function called "sort_files" is related
    to sorting. So I add a breakpoint at that function.

Commands:
    cd ~/lab4/coreutils-with-bug-ins/bin
    gdb ./ls

gdb commands:
    (gdb) break sort_files
    (gdb) run -lt --full-time "/tmp/tmp.kj4DxAgk7N/wwi-armistice" "/tmp/tmp.kj4DxAgk7N/now" "/tmp/tmp.kj4DxAgk7N/now1"

Outputs:
Starting program: /w/home.02/class/classini/lab4/coreutils-with-bug-ins/bin/ls -lt --full-time "/tmp/tmp.kj4DxAgk7N/wwi-armistice" "/tmp/tmp.kj4DxAgk7N/now" "/tmp/tmp.kj4DxAgk7N/now1"

Breakpoint 1, sort_files () at ls.c:2962
2962	  if (! setjmp (failed_strcoll))
(gdb) s
2964          switch (sort_type)
(gdb) s
2969              switch (time_type)
(gdb) s
2975                   func = sort_reverse ? rev_cmp_mtime : compare_mtime;
(gdb) s
2976              break;
(gdb) s
2983          break;
(gdb) s
3034      qsort (files, files_index, sizeof *files, func);
(gdb) s
3035    }

#   It seems that the problem is with this func that is called by qsort. To check which function is used,
    I used the following way.

(gdb) print sort_reverse
$1 = false

#   Thus, the function used is 'compare_mtime', so I set a breakpoint at 'compare_mtime'

(gdb) break compare_mtime
(gdb) run
(gdb) y
(gdb) continue

Output:
Continuing.

Breakpoint 2, compare_mtime (a=0x61a190, b=0x61a240) at ls.c:2884
2884    static int compare_mtime (V a, V b) { return cmp_mtime (a, b, xstrcoll); }

#   It seems that the compare_mtime function actaully relies on cmp_mtime so I step into the function
    to continue check.

(gdb) s
cmp_mtime (a=0x61a190, b=0x61a240, cmp=0x405d48 <xstrcoll>) at ls.c:2880
2880	  int diff = timespec_cmp (get_stat_mtime (&b->stat),

(gdb) next
2882	  return diff ? diff : cmp (a->name, b->name);

(gdb) next
2883    }

#   It seems that the problem is in even a more deeply enbeded function: 'timespec_cmp', so I set a breakpoint
    there.

(gdb) break timespec_cmp
(gdb) run
(gdb) y
(gdb) continue
(gdb) continue

Breakpoint 3, timespec_cmp (a=..., b=...) at ../lib/timespec.h:48
48    int diff = a.tv_sec - b.tv_sec;

(gdb) s
49    return diff ? diff : a.tv_nsec - b.tv_nsec;

(gdb) s
50   }

#   It seems that the origin of all problems come from the diff variable. So I check the value of diff and the
    process we get this value.

(gdb) info locals
diff = 11

(gdb) print a.tv_sec
$5 = 1541133813

(gdb) print b.tv_sec
$4 = 1541133802

#   There is nothing wrong with this output. However, I recall that two of the files output are normal. Thus,
    I decided to run another iteration. To avoid trouble, I remove the first two breakpoints.

(gdb) delete 1 2
(gdb) continue

Breakpoint 3, timespec_cmp (a=..., b=...) at ../lib/timespec.h:48
48    int diff = a.tv_sec - b.tv_sec;

(gdb) s
49    return diff ? diff : a.tv_nsec - b.tv_nsec;

(gdb) info locals
diff = -1140007483

(gdb) print a.tv_sec
$6 = 1541133813

(gdb) print b.tv_sec
$7 = -1613826000

#   For this iteration, it seems that the calculation is wrong: 1541133813 - (-1613826000) = 3154959813.
    However, the calculation produces the wrong result, which is -1140007483.
    Since the maximum integer in C is 2147483647 it is understandable why the strange diff is produced.
    As the result is too large, overflow happens and thus the result is wrong.

(gdb) quit
(gdb) y

--------------------------------------------------------------------------------------------------------

7. Try to fix the bug

#   NOTE: The gdb indicates that the problem occurs in the function 'timespec_cmp' in file timespec.h
    at the directory "~/lab4/coreutils-with-bug/lib".
    (../lib is equivalent to ~/lab4/coreutils-with-bug/lib)

Commands:
    cd ~/lab4/coreutils-with-bug/lib
    cp -i timespec.h ~/lab4/timespec_old.h  #save a copy of the original file
    emacs timespec.h
    M-g g 48 Enter


#   NOTE: I basically try to avoid to do math in this function to avoid overflow. Notice
    that the output of this function is finally going to be used in qsort, which only care
    if the value from the function is positive or zero or negative. Thus, is not necessary
    to do math in this function, just a way of getting the information of which argument is
    larger.

Thus, I change the original function to the following:

static inline int
timespec_cmp (struct timespec a, struct timespec b)
{
  int diff = 0;
  int diffn = 0;
  if(a.tv_sec == b.tv_sec){
    if(a.tv_nsec < b.tv_nsec){
      diffn = -1;
    }
    else if(a.tv_nsec > b.tv_nsec){
      diffn = 1;
    }
    return diffn;
  }
  else if(a.tv_sec < b.tv_sec){
    diff = -1;
  }
  else{
    diff = 1;
  }
  return diff;
}


#   Output the diff file

Commands:
    diff -u timespec.h~ timespec.h >~/lab4/lab4.diff

---------------------------------------------------------------------------------------------

8. Recompile and tests:

Commands:
    cd ..
    make
    cd $tmp
    TZ=UTC0 ~/lab4/coreutils-with-bug/src/ls -lt --full-time wwi-armistice now now1

Output:
-rw-r--r-- 1 classini class 0 2018-11-02 04:43:33.711622286 +0000 now1
-rw-r--r-- 1 classini class 0 2018-11-02 04:43:22.308238633 +0000 now
-rw-r--r-- 1 classini class 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice


#   Compare with the NON-BUGGY ls:

Commands:
    TZ=UTC0 ls -lt --full-time wwi-armistice now now1

Output:
-rw-r--r-- 1 classini class 0 2018-11-02 04:43:33.711622286 +0000 now1
-rw-r--r-- 1 classini class 0 2018-11-02 04:43:22.308238633 +0000 now
-rw-r--r-- 1 classini class 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice


#   CONCLUSION: Since the output from the recompiled version of 'ls' is the same as the
    NON-BUGGY 'ls' installed on SEASnet server, the bug has been fixed.


#   Remove the tmp directory

Commands:
    cd
    rm -fr $tmp

--------------------------------------------------------------------------------------------

9. Find out how SEASnet server will behave on home directory

Commands:
    cd
    touch -d '1918-11-11 11:00 GMT' wwi-armistice
    touch now
    sleep 1
    touch now1
    TZ=UTC0 ls -lt --full-time wwi-armistice now now1

Output:
-rw-r--r-- 1 classini class 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice
-rw-r--r-- 1 classini class 0 2018-11-02 08:26:25.333835000 +0000 now1
-rw-r--r-- 1 classini class 0 2018-11-02 08:26:18.563041000 +0000 now


#   NOTE: Observe that the date of the file "wwi-armistice" is totally wrong. First of all,
    the year is changed to 2054, which is in the future. Also, the data and time mark is
    also wrong: we are getting 12-17 17:28:16 instead of 11-11 11:00.

    The reason behind this problem is due to the representation of time stamps. The Local
    File System on the linux server uses 64-bit time stamps. Thus, it is able to represent
    very old files (specifically files before 1970-01-01) as negative values. However,
    when the same thing is done on the SEASnet server, which use as NFS file system with
    32-bit time stamp, it will cause overflow and result in a time stamp in the future
    (likely due to truncation of sign bit).
