Question 1:
Suppose the other teams really had been observing all the bytes going across the network.
Is your resulting network still secure? If so, explain why, and explain whether your answer would
change if
    (1) you assumed the other teams had also tapped your keyboards after you completed all client-server
    setup and had thereby obtained your team's keystrokes during later operation, or
    (2) you are booting off USB and you assume the other teams temporarily had physical control of the USB.
    If not, explain any weaknesses of your team's setups, focusing on possible attacks by such outside observers.

Answer:
    The network will still be secure, this is because the we are using ssh (Secure Shell) to connect to each
    others' beaglebone and the messages transmitted between our beaglebones are encrypted. To decipher the
    messages, one has to use the private keys that is stored on the beaglebone's disk (not published online).
    Since the the hacker has no access to the private key of both my beaglebone and my partner's, they cannot
    understand the ciphers we are communicating with. Thus, the message will still be secure (even they know
    all the bits we are transmitting and both of the public keys)

Answer to (1):
    The network will still be secure. This is because by tracking the keystrokes I made, the hacker will not
    gain access to my private keys. Even if they can gain access to my password and username, that is useless
    as: (1)they cannot use my username and password to log into the server since they cannot prove they have
    the private key that matches the public key stored in the server. (2)they cannot understand the message I
    receive from the server since the message is encrypted and the hacker don't have the private key
    Thus, the network will still be secure.

Answer to (2):
    The network will not longer be secure (i.e. insecure). This is because if I boot off from the USB, and the
    hacker is able to control my USB, then the private key (and the public keys) can be accessed (maybe by
    reading the keys stored at ~/.ssh) as they are stored in my beaglebone. With both the public and
    private key, they are able decipher all the messages and even trick the authentication process and access
    the my partner's beaglebone with the my identity. Thus, the network is not secure.



Question 2:
Explain why the gpg2 --verify command in the following instructions doesn't really verify that you personally
created the file in question. How would you go about fixing this problem?

Answer:
    This command will verify if the signature (.sig file) of a file is generated by the owner of
    a given public (.sig file is generated by that owner's private key). There is not way for
    "--verify" to know if the "owner" of the provided public key is me, or someone else. Thus,
    someone could generate their own key pairs and use that to re-create the sig, and --verify
    would still give "good signature" if they replace my public key with their public key.
    To deal with this, I should prevent anyone who try to verify my identity from using a wrong public key
    Thus, I will send everyone who try to verify my identity a copy of my public key. Then, they won't
    use the wrong public key to do the verification. Then, they can be sure that I am the one who generate
    the signature if the result of verification is "good signature".
