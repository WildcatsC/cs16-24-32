# LAB

# 1. tr2b.c
Check for duplicates in the from string first. 
check for EOF with feof(stdin)
Use my transpose function to write to stdout with putchar(). 

# 2. tr2u.c
Use read() and write() instead of getchar() and putchar().
Use a char buffer and a size_t variable for the return value of read() and write(). 

# 3. 
# A file that contained at least 5,000,000 bytes:
head --bytes=5000001 /dev/urandom > test.txt

# compile 
gcc -std=c99 tr2b.c -o tr2b
gcc -std=c99 tr2u.c -o tr2u

# (a)
# Compare copying one file to another:
strace -c ./tr2b 'a' 'b' < test.txt > b.out
strace -c ./tr2u 'a' 'b' < test.txt > u.out

tr2b:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 51.06    0.000504           1       611           write
 17.33    0.000171           0       613           read
 10.13    0.000100          11         9           mmap
  5.98    0.000059          15         4           mprotect
  3.85    0.000038          10         4           fstat
  3.04    0.000030          15         2           open
  2.33    0.000023          23         1           munmap
  2.13    0.000021          21         1           execve
  1.42    0.000014          14         1         1 access
  1.32    0.000013           7         2           close
  0.81    0.000008           8         1           brk
  0.61    0.000006           6         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.000987                  1250         1 total

tr2u:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 54.72   27.279145           5   5000001           write
 45.27   22.568516           5   5000003           read
  0.00    0.000067          10         7           mmap
  0.00    0.000063          16         4           mprotect
  0.00    0.000037          37         1           munmap
  0.00    0.000016           8         2           open
  0.00    0.000008           8         1           arch_prctl
  0.00    0.000007           4         2           close
  0.00    0.000007           4         2           fstat
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00   49.847866              10000026         1 total

# (b)
# Compare copying files to terminal:
strace -c ./tr2b 'a' 'b' < test.txt
strace -c ./tr2u 'a' 'b' < test.txt

tr2b:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 97.68    0.129644           6     20026           write
  2.32    0.003079           5       613           read
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         4           fstat
  0.00    0.000000           0         9           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.132723                 20665         1 total

tr2u:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 54.72   27.279145           5   5000001           write
 45.27   22.568516           5   5000003           read
  0.00    0.000067          10         7           mmap
  0.00    0.000063          16         4           mprotect
  0.00    0.000037          37         1           munmap
  0.00    0.000016           8         2           open
  0.00    0.000008           8         1           arch_prctl
  0.00    0.000007           4         2           close
  0.00    0.000007           4         2           fstat
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00   49.847866              10000026         1 total


tr2b makes more write calls when outputting to the terminal screen 
than copyingto another file. 
System calls of tr2u stays the sames and is significantly greater than tr2b. 


# 4. 
# Compare time performance:
time ./tr2b 'abc' 'def' < test.txt > b.time
time ./tr2u 'abc' 'def' < test.txt > u.time

#outputs:

tr2b:
  real 0m0.402s
  user 0m0.349s
  sys 0m0.010s

tr2u:
  real 0m12.336s
  user 0m3.384s
  sys 0m8.906s

Summary: 
The time comparison confirms that the unbuffered version takes much longer 
than the buffered version on the same input data. 
Thus, the buffered tr2b run much faster than the unbuffered tr2u.
Both time and system calls are much less used by tr2b thanks to buffers.



  === === ===



# HOMEWORK

# sfrob and sfrobu:

# Use time command to compare the performance of sfrob and sfrobu,
# using the 5 MB test.txt.
    
time ./sfrob < test.txt > out.txt
time ./sfrobu < test.txt > out.txt  
time ./sfrobu -f < test.txt > out.txt

sfrob:
  real    0m0.350s
  user    0m0.287s
  sys 0m0.008s

sfrobu:
  real    0m12.613s
  user    0m3.493s
  sys 0m9.075s

sfrobu -f:
  real    0m12.724s
  user    0m3.410s
  sys 0m9.268s

The unbuffered version runs much slower
than the buffered version.

Use wc command to count the line length of test.txt
and then changed the bytes field to get the desired number of lines:


touch 0.txt

head --bytes=27000 /dev/urandom | wc -l
output: 112
head --bytes=27000 /dev/urandom > 100.txt

head --bytes=2700000 /dev/urandom | wc -l
output: 10406
head --bytes=2700000 /dev/urandom > 10k.txt

head --bytes=270000000 /dev/urandom | wc -l
output: 1056019
head --bytes=270000000 /dev/urandom > 1m.txt

    
Use time commands on the newly created files to attempt to model the time
complexity of sfrobu:

time ./sfrobu < 0.txt > out.txt
time ./sfrobu < 100.txt > out.txt
time ./sfrobu < 10k.txt > out.txt
time ./sfrobu < 1m.txt > out.txt

# num lines | time (minutes.seconds):

  0	  |		 0m0.009s
  100	  |	    	 0m0.075s
  10000	  |		 0m5.597s
  1000000	  |	      11m.27.604s

Given the time complexity of qsort, nlog(n), I assumed that the CPU time cost
function would be of the form: C(n) = K * n * log(n)
I tested this guess on the number of seconds sfrobu took for 1m.txt, by
soliving for K:
  (11 * 60 + 27.604) / (1000000 * log(1000000)) = K
  K = 0.0000345

Checke if this is valid for 10k.txt and 100.txt
  0.0000345 * 10000 * log(10000) = 4.584 -> 5.597
  0.0000345 * 100 * log(100) = 0.023 -> 0.075

Although the result wasn't exactly what was measured, 
the form n * log(n) gave results consistent with the significant figures I
was measuring. In general, I would guess the CPU cost as a function of n lines:
C(n) = K * n * log(n).

# Determine the system calls that sfrobu uses to allocate memory:
strace -c ./sfrobu < 100.txt > outputS.txt
strace -c ./sfrobu < 10k.txt > outputS.txt

100.txt:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 57.03    0.254198           9     27001           write
 42.89    0.191164           7     27002           read
  0.03    0.000121          15         8           brk
  0.02    0.000080          11         7           mmap
  0.01    0.000057          14         4           mprotect
  0.01    0.000029          15         2           open
  0.01    0.000029          10         3           fstat
  0.01    0.000023          23         1           munmap
  0.00    0.000015           8         2           close
  0.00    0.000014          14         1           execve
  0.00    0.000013          13         1         1 access
  0.00    0.000007           7         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.445750                 54033         1 total

10k.txt:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 58.04   15.047635           6   2699956           write
 41.96   10.879799           4   2700003           read
  0.00    0.000516         172         3           munmap
  0.00    0.000068           9         8           brk
  0.00    0.000044          11         4           mprotect
  0.00    0.000033           4         9           mmap
  0.00    0.000014           4         4           fstat
  0.00    0.000008           8         1           arch_prctl
  0.00    0.000007           2         3           close
  0.00    0.000000           0         3           open
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00   25.928124               5399996         1 total

Calls for mmap and munmap were the two system calls that increased 
when the number of lines grow from 100 to 10000. 
They might be the two system calls sfrobu used to allocate/reallocate memory. 


