#------if statements and case statements---------
            #this block of code should check for:# -r passed? (use shift command here)
            #was a start directory passed as an argument?
            #is the start directory valid? If not, print to stderrand exit
            #wrong usage or wrong number of arguments? -> print to stderrand exit
if [ $# -eq 0 ]; then
    echo "Error: Empty input"
    exit 1
elif [ $1 == "." ]; then
    DIR=`pwd`
elif [ $# -eq 1 ]; then
    DIR=$1
elif [ $# -eq 2 ]; then
    r=$1
    DIR=$2
elif [ $# -ge 3 ]; then
    echo "Error: Too mamy arguments\n" 1>&2
    # usage
    exit 2
fi

if [[ $DIR =~ /$ ]]; then
    DIR=$(echo $DIR | sed s/.$//)
fi

if [ ${#DIR} == 2 ] && [ ${DIR:0:1} == '-' ]; then
    echo "Error: Directory cannot start with \'-\'\n" 1>&2
    exit 3
fi

if [ ! -d $DIR ]; then
    echo "Error Please enter a directory" 1>&2
    exit 4
fi

#---------------recursion check------------------
            #this block of code checks for recursion:
            #if recursion -> run recursion statement
            #else -> run non-recursive block

# usage(){ 
#     echo "\nUsage: ./poornames [directoryName]\n\n" 1>&2; 
#     }

check_duplicate(){
    input=$(echo $1 | tr '[:upper:]' '[:lower:]')
    shift
    arr=("$@")
    for i in $@; do
	    if [[ "$toCheck" == "$i" ]]; then
	        return 0
	    fi
    done
    return 1
}

poorname(){

    declare -a valid

    file=$(find $1 -type f -mindepth 1 -maxdepth 1)
    directory=$(find $1 -type d -mindepth 1 -maxdepth 1)
    
    for x in ${file}; do
	    if [[ ! $x =~ $1/[_A-Za-z][_A-Za-z\.\-]{0,13}$ ]] || [ ${x:0:1} == "\." ] || [ ${x:0:1} == "\-" ]; then
                echo "$x"
	    elif check_duplicate $x ${valid[@]} ; then
	            echo "$x"
	    else
	        valid+=($(echo $x | tr 'A-Z' 'a-z'))
        fi
    done
    
    for x in ${directory}; do
	        if [[ ! $x =~ $1/[_A-Za-z][_A-Za-z\.\-]{0,13}$ ]] || [ ${x:0:1} == "\." ] || [ ${x:0:1} == "\-" ]; then
                echo "${x}/" 
	    elif check_duplicate $x ${valid[@]} ; then
                echo "${x}/" 
	    else
	        valid+=($(echo $x | tr 'A-Z' 'a-z'))
        fi

	    if [ "$2" == "-r" ]; then
		    if [ -r "$x" ]; then
		        poorname $x $2
		    else
		        echo "Error: Cannot read $x : Permission Denied\n" 1>&2
	        fi
	    fi
    done
    
}
                                                                                                                                                                
#---------------non recursive block------------
        #this block of code could be a function
        #get all immediate filenames and print the ones that have invalid characters
        #find all immediate and valid filenames and print the duplicates

poorname $DIR $r
