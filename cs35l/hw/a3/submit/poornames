D=null
ARGS=$#
R=false
IFS=$'\n'


if (($ARGS == 0))
then 
    echo "Error: Empty input" >&2
    exit 1
fi

if (($ARGS > 2))
then
    echo "Error: Too many arguments." >&2
    exit 1
fi

if (($ARGS == 2))
then
    if [ "${1:0:2}" != "-r" ]
    then
	echo "Error: Incorrect option." >&2
	exit 1
    fi

    if [ "${2:0:1}" == "-" ]
    then
	echo "Error: Cannot start with '-'." >&2
	exit 1
    fi

    R=true
    D=$2
fi

if (($ARGS == 1))
then
    if [ "${1:0:2}" == "-r" ]
    then
	R=true
    else
	D=$1
    fi
fi

if [ !  -d "${D}" ]
then
    echo "Error: Not a directory." >&2
    exit 1
fi

if [ !  -r "${D}" ]
then
    echo "Error: No permission." >&2
fi


poorname_r()
{
    local DIR=$1

    poorname $DIR
    
    directory=$(find "$DIR" -mindepth 1 -maxdepth 1 -type d \-exec basename {} \; | sed 's/ /\\ /g')
    for item in $directory;
    do
	poorname_r  "$DIR/$item"
    done
}

poorname()
{   
    
    local DIR=$1
    if [ ! -r "${DIR}" ]
    then
        echo "Error: No permission" >&2
    fi

    files=$(find "$DIR" -mindepth 1 -maxdepth 1 -exec basename {} \; | sed 's/ /\\ /g')
    #d=$(find "$DIR" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | sed 's/ /\\ /g')
    
    invalid=$(echo "$files" | grep -E "^\.[a-zA-z_-]|^\.{2}[a-zA-z_-]|[^a-zA-Z\._-]|^-|[a-zA-Z\._-]{15,}")

    duplicates=$(echo "$files" | sort -f | uniq -id)

    inv_names=$({ echo "$invalid"; echo "$duplicates"; } | sort -u)

    for item in $inv_names;
    do
        if [ -d "$DIR/$item" ]; then
            echo "$DIR/$item/"
        else
	        echo $DIR/$item
        fi
    done
}


if [ "$R" != "true" ]
then
    poorname $D
else
    poorname_r $D
fi